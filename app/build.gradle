def config = configHelper.fetchConfig()
def appId = config.getOrDefault("APPLICATION_ID", "org.openedx.app")
def themeDirectory = config.getOrDefault("THEME_DIRECTORY", "openedx")
def firebaseConfig = config.get('FIREBASE')
def firebaseEnabled = firebaseConfig?.getOrDefault('ENABLED', false)

apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'com.google.devtools.ksp'
apply plugin: 'org.jetbrains.kotlin.plugin.compose'

if (firebaseEnabled) {
    apply plugin: 'com.google.gms.google-services'
    apply plugin: 'com.google.firebase.crashlytics'

    tasks.register('generateGoogleServicesJson') {
        configHelper.generateGoogleServicesJson(appId)
    }

    preBuild.dependsOn(generateGoogleServicesJson)
} else {
    tasks.register('removeGoogleServicesJson') {
        configHelper.removeGoogleServicesJson()
    }

    preBuild.dependsOn(removeGoogleServicesJson)
}

android {
    compileSdk 34

    defaultConfig {
        applicationId appId
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0.0"

        resourceConfigurations += ["en", "uk"]

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    namespace 'org.openedx.app'

    flavorDimensions += "env"
    productFlavors {
        prod {
            dimension 'env'
            setupBranchConfigFields(it)
            setupFirebaseConfigFields(it)
        }
        develop {
            dimension 'env'
            setupBranchConfigFields(it)
            setupFirebaseConfigFields(it)
        }
        stage {
            dimension 'env'
            setupBranchConfigFields(it)
            setupFirebaseConfigFields(it)
        }
    }

    sourceSets {
        prod {
            res.srcDirs = ["src/$themeDirectory/res"]
        }
        develop {
            res.srcDirs = ["src/$themeDirectory/res"]
        }
        stage {
            res.srcDirs = ["src/$themeDirectory/res"]
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            if (firebaseEnabled) {
                firebaseCrashlytics {
                    mappingFileUploadEnabled false
                }
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
        freeCompilerArgs = List.of("-Xstring-concat=inline")
    }
    buildFeatures {
        viewBinding true
        compose true
        buildConfig true
    }
    bundle {
        language {
            enableSplit = false
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    implementation project(path: ':core')
    implementation project(path: ':auth')
    implementation project(path: ':course')
    implementation project(path: ':dashboard')
    implementation project(path: ':discovery')
    implementation project(path: ':profile')
    implementation project(path: ':discussion')
    implementation project(path: ':whatsnew')

    ksp "androidx.room:room-compiler:$room_version"

    implementation 'androidx.core:core-splashscreen:1.0.1'

    api platform("com.google.firebase:firebase-bom:$firebase_version")
    api "com.google.firebase:firebase-messaging"

    // Braze SDK Integration
    implementation "com.braze:android-sdk-ui:30.2.0"

    // Plugins
    implementation("com.github.openedx:openedx-app-firebase-analytics-android:1.0.0")

    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
    testImplementation "junit:junit:$junit_version"
    testImplementation "io.mockk:mockk:$mockk_version"
    testImplementation "io.mockk:mockk-android:$mockk_version"
    testImplementation "androidx.arch.core:core-testing:$android_arch_version"
}

private def setupBranchConfigFields(buildType) {
    def branchConfig = configHelper.fetchConfig().get("BRANCH")
    def branchKey = ""
    def branchUriScheme = ""
    def branchHost = ""
    def branchAlternateHost = ""

    if (branchConfig && branchConfig.get("ENABLED")) {
        branchKey = branchConfig.getOrDefault("KEY", "")
        branchUriScheme = branchConfig.getOrDefault("URI_SCHEME", "")
        branchHost = branchConfig.getOrDefault("HOST", "")
        branchAlternateHost = branchConfig.getOrDefault("ALTERNATE_HOST", "")

        // Validation: Throw exception if any field is empty
        if (branchKey.isEmpty() || branchUriScheme.isEmpty() || branchHost.isEmpty() ||
                branchAlternateHost.isEmpty()) {
            throw new IllegalStateException("One or more Branch configuration fields are empty.")
        }
    }

    buildType.resValue "string", "branch_key", branchKey
    buildType.resValue "string", "branch_uri_scheme", branchUriScheme
    buildType.resValue "string", "branch_host", branchHost
    buildType.resValue "string", "branch_alternate_host", branchAlternateHost
}

private def setupFirebaseConfigFields(buildType) {
    def firebaseConfig = configHelper.fetchConfig().get('FIREBASE')
    def firebaseEnabled = firebaseConfig?.getOrDefault('ENABLED', false)
    def cloudMessagingEnabled = firebaseConfig?.getOrDefault('CLOUD_MESSAGING_ENABLED', false)

    buildType.manifestPlaceholders = [fcmEnabled: firebaseEnabled && cloudMessagingEnabled]
}
