import org.edx.builder.ConfigHelper

import java.util.regex.Matcher
import java.util.regex.Pattern

buildscript {
    ext {
        kotlin_version = '1.9.22'
        coroutines_version = '1.7.1'
        compose_version = '1.6.2'
        compose_compiler_version = '1.5.10'
    }
}

plugins {
    id 'com.android.application' version '8.5.2' apply false
    id 'com.android.library' version '8.5.2' apply false
    id 'org.jetbrains.kotlin.android' version "$kotlin_version" apply false
    id 'com.google.gms.google-services' version '4.4.1' apply false
    id "com.google.firebase.crashlytics" version "3.0.1" apply false
}

tasks.register('clean', Delete) {
    delete rootProject.layout.buildDirectory
}

ext {
    core_version = "1.10.1"
    appcompat_version = "1.6.1"
    material_version = "1.11.0"
    lifecycle_version = "2.7.0"
    fragment_version = "1.6.2"
    constraintlayout_version = "2.1.4"
    viewpager2_version = "1.0.0"
    media3_version = "1.1.1"
    youtubeplayer_version = "11.1.0"

    firebase_version = "33.0.0"

    retrofit_version = '2.9.0'
    logginginterceptor_version = '4.9.1'

    koin_version = '3.2.0'

    coil_version = '2.3.0'

    jsoup_version = '1.13.1'

    room_version = '2.6.1'

    work_version = '2.9.0'

    window_version = '1.2.0'

    in_app_review = '2.0.1'

    extented_spans_version = "1.3.0"

    webkit_version = "1.11.0"

    configHelper = new ConfigHelper(projectDir, getCurrentFlavor())

    //testing
    mockk_version = '1.13.3'
    android_arch_version = '2.2.0'
    junit_version = '4.13.2'
}

def getCurrentFlavor() {
    String tskReqStr = getGradle().getStartParameter().getTaskRequests().toString()
    Pattern pattern
    if (tskReqStr.contains("assemble")) // to run ./gradlew assembleRelease to build APK
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    else if (tskReqStr.contains("bundle")) // to run ./gradlew bundleRelease to build .aab
        pattern = Pattern.compile("bundle(\\w+)(Release|Debug)")
    else
        pattern = Pattern.compile("generate(\\w+)(Release|Debug)")
    Matcher matcher = pattern.matcher(tskReqStr)
    if (matcher.find()) {
        return matcher.group(1).toLowerCase()
    } else {
        return ""
    }
}

task generateMockedRawFile() {
    doLast { configHelper.generateMicrosoftConfig() }
}
