import io.gitlab.arturbosch.detekt.Detekt
import org.edx.builder.ConfigHelper

import java.util.regex.Matcher
import java.util.regex.Pattern

buildscript {
    ext {
        //Depends on versions in OEXFoundation
        kotlin_version = '2.0.0'
        room_version = '2.6.1'
        detekt_version = '1.23.7'
    }
}

plugins {
    id 'com.android.application' version '8.5.2' apply false
    id 'com.android.library' version '8.5.2' apply false
    id 'org.jetbrains.kotlin.android' version "$kotlin_version" apply false
    id 'com.google.gms.google-services' version '4.4.2' apply false
    id "com.google.firebase.crashlytics" version "3.0.2" apply false
    id "com.google.devtools.ksp" version "2.0.0-1.0.24" apply false
    id "org.jetbrains.kotlin.plugin.compose" version "$kotlin_version" apply false
    id 'io.gitlab.arturbosch.detekt' version "$detekt_version" apply false
}

tasks.register('clean', Delete) {
    delete rootProject.layout.buildDirectory
}

ext {
    media3_version = "1.4.1"
    youtubeplayer_version = "11.1.0"

    firebase_version = "33.0.0"

    jsoup_version = '1.13.1'

    in_app_review = '2.0.1'

    extented_spans_version = "1.3.0"

    webkit_version = "1.11.0"

    configHelper = new ConfigHelper(projectDir, getCurrentFlavor())

    zip_version = '2.6.3'
    //testing
    mockk_version = '1.13.12'
    android_arch_version = '2.2.0'
    junit_version = '4.13.2'
}

def getCurrentFlavor() {
    String tskReqStr = getGradle().getStartParameter().getTaskRequests().toString()
    Pattern pattern
    if (tskReqStr.contains("assemble")) // to run ./gradlew assembleRelease to build APK
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    else if (tskReqStr.contains("bundle")) // to run ./gradlew bundleRelease to build .aab
        pattern = Pattern.compile("bundle(\\w+)(Release|Debug)")
    else
        pattern = Pattern.compile("generate(\\w+)(Release|Debug)")
    Matcher matcher = pattern.matcher(tskReqStr)
    if (matcher.find()) {
        return matcher.group(1).toLowerCase()
    } else {
        return ""
    }
}

tasks.register('generateMockedRawFile') {
    doLast { configHelper.generateMicrosoftConfig() }
}

def projectSource = file(projectDir)
def configFile = files("$rootDir/config/detekt.yml")
def basePathFile = rootProject.projectDir.absolutePath
def kotlinFiles = "**/*.kt"
def resourceFiles = "**/resources/**"
def buildFiles = "**/build/**"

apply plugin: 'io.gitlab.arturbosch.detekt'

tasks.register("detektAll", Detekt) {
    def autoFix = project.hasProperty('detektAutoFix')

    description = "Custom DETEKT build for all modules"
    parallel = true
    ignoreFailures = false
    autoCorrect = autoFix
    buildUponDefaultConfig = true
    setSource(projectSource)
    config.setFrom(configFile)
    include(kotlinFiles)
    basePath(basePathFile)
    exclude(resourceFiles, buildFiles)
    reports {
        html.enabled(true)
        xml.enabled(true)
        txt.enabled(false)
        sarif.enabled(true)
    }
}

dependencies {
    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$detekt_version"
}
